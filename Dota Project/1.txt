1. Пропуски имеют:
first_blood_time
first_blood_team
first_blood_player1
first_blood_player2
radiant_bottle_time
radiant_courier_time
radiant_flying_courier_time
radiant_first_ward_time
dire_bottle_time
dire_courier_time
dire_flying_courier_time
dire_first_ward_time

Почти все признаки тут связаны с временем какого-то события. А пропуски означают что событив в первые 5 минут могли не произойти.

2. Целевая переменная в столбце - radiant_win

3. Время обработки Градиентного Бустинга на 30 деревьях 44.29 секунды.
Качество - 0.68

4. Имеет смысл использовать больше деревьев так как качество будет расти. Чтобы ускорить процесс нужно понижать размерность (метод главных компонент), использовать мощный компьютер, производить вычисление параллельно, задав параметр n_jobs="количество ядер процессора". Уменьшать глубину деревьев можно, но она у нас по умолчанию равна 3, ниже делать уже неочень правильно.


----------------------------


1. Качество логистической регрессии над всеми исходными признаками: 0.712 - больше чем у Градиентного Бустинга.
Время обработки Логистической Регрессии 5.23 в 8 раз быстрее чем у Градиентного Бустинга.

Логистическая регрессия лучше справляется с задачей потому, что у данных много признаков и логистическая регрессия лучше их учитывает. Градиентному бустингу чтобы добиться такого же качества нужно будет задавать еще больше деревьев что замедлит вычисление.

2. Если удалим категориальные признаки, получим качество 0.714
Качество незначительно улучшается. Так происходит потому, что алгоритм раньше учитывал категориальные признаки как вещественные, числовые. А это естественно неверно. И при их удалении мы получили качество выше, так как ошибка стала меньше.

3. Различных идентификаторов героев в игре - 108

4. При добавлении мешка слов по героям получили качество: 0.75
Качество улучшилось, так как в алгоритме стали учитываться герои, а это важные признаки. И теперь они учитываются правильно.

5. Минимальное качество 0.006, максимальное 0.994
